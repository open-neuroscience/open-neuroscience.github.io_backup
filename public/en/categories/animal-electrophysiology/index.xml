<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animal electrophysiology | Open Neuroscience</title>
    <link>https://open-neuroscience.com/en/categories/animal-electrophysiology/</link>
      <atom:link href="https://open-neuroscience.com/en/categories/animal-electrophysiology/index.xml" rel="self" type="application/rss+xml" />
    <description>Animal electrophysiology</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>CC BY SA 4.0</copyright><lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://open-neuroscience.com/images/icon_hud109d9c66059217af2bab44795aa78ad_73385_512x512_fill_lanczos_center_2.png</url>
      <title>Animal electrophysiology</title>
      <link>https://open-neuroscience.com/en/categories/animal-electrophysiology/</link>
    </image>
    
    <item>
      <title>DataJoint</title>
      <link>https://open-neuroscience.com/en/post/datajoint/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/datajoint/</guid>
      <description>&lt;p&gt;DataJoint is an open-source library for managing and sharing scientific data pipelines in Python and Matlab.&lt;/p&gt;
&lt;p&gt;DataJoint allows creating and sharing computational data pipelines, which are defined as databases and analysis code for executing steps of activities for data collection and analysis. For example, many neuroscience studies are organized around DataJoint pipelines that start with basic information about the experiment, then ingest acquired data, and then perform processing, analysis, and visualization of results. The entire pipeline is diagrammed as a graph where each node is a table in the database with a corresponding class in the programming language; together they define the data structure and computations.&lt;/p&gt;
&lt;p&gt;DataJoint key features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access to shared data pipelines in a relational database (MySQL-compatible) from Python, Matlab, or both.&lt;/li&gt;
&lt;li&gt;data integrity and consistency based founded on the relational data model and transactions&lt;/li&gt;
&lt;li&gt;an intuitive data definition language for pipeline design&lt;/li&gt;
&lt;li&gt;a diagramming notation to visualize data structure and dependencies&lt;/li&gt;
&lt;li&gt;a serialization framework: storing large numerical arrays and other scientific data in a language-independent way&lt;/li&gt;
&lt;li&gt;a flexible query language to retrieve precise cross-sections of data in a desired format&lt;/li&gt;
&lt;li&gt;automated  execution of computational jobs, with built-in job management for distributed computing&lt;/li&gt;
&lt;li&gt;managed storage of large data objects outside the database&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;Dimitri Yatsenko; Edgar Walker; Fabian Sinz; Christopher Turner; Raphael Guzman&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://datajoint.io&#34;&gt;https://datajoint.io&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
Dimitri Yatsenko&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Neurodata Without Borders</title>
      <link>https://open-neuroscience.com/en/post/neurodata_without_borders/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/neurodata_without_borders/</guid>
      <description>&lt;p&gt;Neurodata Without Borders is a data standard for neurophysiology, providing neuroscientists with a common standard to share, archive, use, and build analysis tools for neurophysiology data. NWB is designed to store a variety of neurophysiology data, including data from intracellular and extracellular electrophysiology experiments, data from optical physiology experiments, and tracking and stimulus data.&lt;/p&gt;
&lt;p&gt;The NWB team consists of neuroscientists and software developers who recognize that adoption of a unified data format is an important step toward breaking down the barriers to data sharing in neuroscience.&lt;/p&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;Andrew Tritt; Ryan Ly; Ben Dichter; Oliver Ruebel&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nwb.org/&#34;&gt;https://www.nwb.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;project-video&#34;&gt;Project Video&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/vfQsMyl0HQI&#34;&gt;https://youtu.be/vfQsMyl0HQI&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
Ben Dichter&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>SpikeInterface</title>
      <link>https://open-neuroscience.com/en/post/spikeinterface/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/spikeinterface/</guid>
      <description>&lt;p&gt;SpikeInterface is a unified Python framework for spike sorting. With its high-level API, it is designed to be accessible and easy to use, allowing users to build full analysis pipelines for spike sorting (reading-writing (IO) / preprocessing / spike sorting / postprocessing / validation / curation / comparison / visualization) with a few lines of code.&lt;/p&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;Alessio Buccino*; Cole Hurwitz*; Samuel Garcia; Jeremy Magland; Josh Siegle; Matthias Hennig&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SpikeInterface/spikeinterface&#34;&gt;https://github.com/SpikeInterface/spikeinterface&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;project-video&#34;&gt;Project Video&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nWJGwFB7oII&#34;&gt;https://www.youtube.com/watch?v=nWJGwFB7oII&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
Alessio Buccino&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Heuristic Spike Sorting Tuner (HSST), a framework to determine optimal parameter selection for a generic spike sorting algorithm</title>
      <link>https://open-neuroscience.com/en/post/heuristic_spike_sorting_tuner_hsst_a_framework_to_determine_optimal_parameter_selection_for_a_generic_spike_sorting_algorithm/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/heuristic_spike_sorting_tuner_hsst_a_framework_to_determine_optimal_parameter_selection_for_a_generic_spike_sorting_algorithm/</guid>
      <description>&lt;p&gt;Extracellular microelectrodes frequently record neural activity from more than one neuron in the vicinity of the electrode. The process of labeling each recorded spike waveform with the identity of its source neuron is called spike sorting and is often approached from an abstracted statistical perspective. However, these approaches do not consider neurophysiological realities and may ignore important features that could improve the accuracy of these methods. Further, standard algorithms typically require selection of at least one free parameter, which can have significant effects on the quality of the output. We describe a Heuristic Spike Sorting Tuner (HSST) that determines the optimal choice of the free parameters for a given spike sorting algorithm based on the neurophysiological qualification of unit isolation and signal discrimination. A set of heuristic metrics are used to score the output of a spike sorting algorithm over a range of free parameters resulting in optimal sorting quality. We demonstrate that these metrics can be used to tune parameters in several spike sorting algorithms. The HSST algorithm shows robustness to variations in signal to noise ratio, number and relative size of units per channel. Moreover, the HSST algorithm is computationally efficient, operates unsupervised, and is parallelizable for batch processing.&lt;/p&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;David A. Bjanes; Lee B. Fisher; Robert A. Gaunt; Douglas J. Weber&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/davidbjanes/hsst&#34;&gt;https://github.com/davidbjanes/hsst&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
David Bjanes&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Craniobot</title>
      <link>https://open-neuroscience.com/en/post/craniobot/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/craniobot/</guid>
      <description>&lt;p&gt;The Craniobot is a cranial microsurgery platform that combines automated skull surface profiling with a computer numerical controlled (CNC) milling machine to perform a variety of cranial microsurgical procedures in mice. The Craniobot utilizes a low force contact sensor to profile the skull surface and uses this information to perform micrometer-scale precise milling operations within minutes. The procedure of removing the sub-millimeter thick mouse skull precisely without damaging the underlying brain can be technically challenging and often takes significant skill and practice. This can now be overcome using the Craniobot.&lt;/p&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;Mathew Rynes, Leila Ghanbari, Micheal Laroque, Greg Johnson, Daniel Sousa Schulman, Suhasa Kodandaramaiah&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.labmaker.org/products/craniobot&#34;&gt;https://www.labmaker.org/products/craniobot&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
Matias Andina&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
  </channel>
</rss>
