<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computational Neuroscience | Open Neuroscience</title>
    <link>https://open-neuroscience.com/en/tags/computational-neuroscience/</link>
      <atom:link href="https://open-neuroscience.com/en/tags/computational-neuroscience/index.xml" rel="self" type="application/rss+xml" />
    <description>Computational Neuroscience</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>CC BY SA 4.0</copyright><lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://open-neuroscience.com/images/icon_hu98f7bdece981985d79e430785ac9bc37_26395_512x512_fill_lanczos_center_2.png</url>
      <title>Computational Neuroscience</title>
      <link>https://open-neuroscience.com/en/tags/computational-neuroscience/</link>
    </image>
    
    <item>
      <title>DataJoint</title>
      <link>https://open-neuroscience.com/en/post/datajoint/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/datajoint/</guid>
      <description>&lt;p&gt;DataJoint is an open-source library for managing and sharing scientific data pipelines in Python and Matlab.&lt;/p&gt;
&lt;p&gt;DataJoint allows creating and sharing computational data pipelines, which are defined as databases and analysis code for executing steps of activities for data collection and analysis. For example, many neuroscience studies are organized around DataJoint pipelines that start with basic information about the experiment, then ingest acquired data, and then perform processing, analysis, and visualization of results. The entire pipeline is diagrammed as a graph where each node is a table in the database with a corresponding class in the programming language; together they define the data structure and computations.&lt;/p&gt;
&lt;p&gt;DataJoint key features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access to shared data pipelines in a relational database (MySQL-compatible) from Python, Matlab, or both.&lt;/li&gt;
&lt;li&gt;data integrity and consistency based founded on the relational data model and transactions&lt;/li&gt;
&lt;li&gt;an intuitive data definition language for pipeline design&lt;/li&gt;
&lt;li&gt;a diagramming notation to visualize data structure and dependencies&lt;/li&gt;
&lt;li&gt;a serialization framework: storing large numerical arrays and other scientific data in a language-independent way&lt;/li&gt;
&lt;li&gt;a flexible query language to retrieve precise cross-sections of data in a desired format&lt;/li&gt;
&lt;li&gt;automated  execution of computational jobs, with built-in job management for distributed computing&lt;/li&gt;
&lt;li&gt;managed storage of large data objects outside the database&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;Dimitri Yatsenko; Edgar Walker; Fabian Sinz; Christopher Turner; Raphael Guzman&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://datajoint.io&#34;&gt;https://datajoint.io&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
Dimitri Yatsenko&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Heuristic Spike Sorting Tuner (HSST), a framework to determine optimal parameter selection for a generic spike sorting algorithm</title>
      <link>https://open-neuroscience.com/en/post/heuristic_spike_sorting_tuner_hsst_a_framework_to_determine_optimal_parameter_selection_for_a_generic_spike_sorting_algorithm/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/heuristic_spike_sorting_tuner_hsst_a_framework_to_determine_optimal_parameter_selection_for_a_generic_spike_sorting_algorithm/</guid>
      <description>&lt;p&gt;Extracellular microelectrodes frequently record neural activity from more than one neuron in the vicinity of the electrode. The process of labeling each recorded spike waveform with the identity of its source neuron is called spike sorting and is often approached from an abstracted statistical perspective. However, these approaches do not consider neurophysiological realities and may ignore important features that could improve the accuracy of these methods. Further, standard algorithms typically require selection of at least one free parameter, which can have significant effects on the quality of the output. We describe a Heuristic Spike Sorting Tuner (HSST) that determines the optimal choice of the free parameters for a given spike sorting algorithm based on the neurophysiological qualification of unit isolation and signal discrimination. A set of heuristic metrics are used to score the output of a spike sorting algorithm over a range of free parameters resulting in optimal sorting quality. We demonstrate that these metrics can be used to tune parameters in several spike sorting algorithms. The HSST algorithm shows robustness to variations in signal to noise ratio, number and relative size of units per channel. Moreover, the HSST algorithm is computationally efficient, operates unsupervised, and is parallelizable for batch processing.&lt;/p&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;David A. Bjanes; Lee B. Fisher; Robert A. Gaunt; Douglas J. Weber&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/davidbjanes/hsst&#34;&gt;https://github.com/davidbjanes/hsst&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
David Bjanes&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>BossDB</title>
      <link>https://open-neuroscience.com/en/post/bossdb/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/bossdb/</guid>
      <description>&lt;p&gt;BossDB is a volumetric database that lives in the AWS cloud. Hundreds of terabytes of electron microscopy, light microscopy, and x-ray tomography data are available for free download and study.&lt;/p&gt;
&lt;p&gt;Have a project you want to share with the world for free? Get in touch!
&lt;a href=&#34;https://twitter.com/thebossdb&#34;&gt;https://twitter.com/thebossdb&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;JHU|APL&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://bossdb.org/&#34;&gt;https://bossdb.org/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
Jordan Matelsky&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Suite2P</title>
      <link>https://open-neuroscience.com/en/post/suite2p/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>https://open-neuroscience.com/en/post/suite2p/</guid>
      <description>&lt;p&gt;Suite2P is a very modular imaging processing pipeline written in Python which allows you to perform registration of raw data movies, automatic cell detection, extraction of calcium traces and infers spike times. It is a very fast and accurate tool and can work on standard workstations. It also includes a visualization graphical user interface (GUI) that facilitates analysis and manual curation of the cell detection algorithm.&lt;/p&gt;
&lt;h2 id=&#34;project-authors&#34;&gt;Project Author(s)&lt;/h2&gt;
&lt;p&gt;Carsen Stringer and Marius Pachitariu&lt;/p&gt;
&lt;h2 id=&#34;project-links&#34;&gt;Project Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://mouseland.github.io/suite2p/_build/html/index.html&#34;&gt;https://mouseland.github.io/suite2p/_build/html/index.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was automatically generated by
Miguel Fernandes&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
  </channel>
</rss>
